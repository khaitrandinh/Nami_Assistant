document.addEventListener('DOMContentLoaded', () => {
    const userInput = document.getElementById('user-input');
    const sendButton = document.getElementById('send-button');
    const chatMessages = document.getElementById('chat-messages');
    const connectionStatus = document.getElementById('connection-status');
    const chatForm = document.getElementById('chat-form');

    let isConnected = false;
    let isProcessing = false;

    // Connection status check
    function checkConnection() {
        fetch('http://localhost:3000/health', { 
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
            },
        })
        .then(response => {
            // console.log('Connection check response:', response);
            if (response.ok) {
                isConnected = true;
                connectionStatus.textContent = 'Tr·ª±c tuy·∫øn';
                connectionStatus.className = 'connection-status online';
                connectionStatus.style.display = 'block';
                return response.json().catch(() => ({})); // Handle non-JSON responses
            } else {
                throw new Error('Server not responding');
            }
        })
        .catch(error => {
            console.error('‚ùå L·ªói khi check connection:', error);
            isConnected = false;
            connectionStatus.style.display = 'block';
            connectionStatus.textContent = 'ƒêang ki·ªÉm tra k·∫øt n·ªëi...';
            connectionStatus.className = 'connection-status offline';

        });
    }
     function renderSupportPrompt(text) {
        
        addMessage('ai', text);
        const container = document.createElement('div');
        container.className = 'support-buttons';

        const btnYes = document.createElement('button');
        btnYes.className = 'support-btn';
        btnYes.textContent = 'ƒê·ªìng √Ω';
        btnYes.onclick = () => handleSupportAgree();

        const btnNo = document.createElement('button');
        btnNo.className = 'support-btn no';
        btnNo.textContent = 'Kh√¥ng';
        btnNo.onclick = () => sendSupportConfirmation(false);

        container.append(btnYes, btnNo);
        chatMessages.appendChild(container);
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }

    function handleSupportAgree() {
         addMessage('ai', 'üí° <strong>H∆∞·ªõng d·∫´n:</strong><br>' +
                            '‚Ä¢ Chuy·ªÉn sang tab v·ª´a m·ªü<br>' +
                            '‚Ä¢ T√¨m bi·ªÉu t∆∞·ª£ng chat/h·ªó tr·ª£ (th∆∞·ªùng ·ªü g√≥c ph·∫£i d∆∞·ªõi)<br>' +
                            '‚Ä¢ Click ƒë·ªÉ m·ªü chat v√† nh·∫≠p "help me!" ƒë·ªÉ b·∫Øt ƒë·∫ßu');
        
        
        // 2. Th√¥ng b√°o cho user h∆∞·ªõng d·∫´n
        document.querySelectorAll(".support-buttons").forEach((el) => el.remove());
        
        addMessage('ai', '‚úÖ C·∫£m ∆°n b·∫°n ƒë√£ ƒë·ªìng √Ω h·ªó tr·ª£. T√¥i s·∫Ω m·ªü trang h·ªó tr·ª£ trong 3s.');
        
        // Th√™m h∆∞·ªõng d·∫´n cho user
        setTimeout(() => {
            const supportWin = window.open(
            "https://test.nami.exchange/vi/support",
            "_blank"
        );
        supportWin.foucus();
        }, 3000);
    }


    async function sendSupportConfirmation(confirm) {
  // x√≥a n√∫t
        document.querySelectorAll('.support-buttons').forEach(el => el.remove());

        if (!confirm) {
            // user b·∫•m ‚ÄúKh√¥ng‚Äù th√¨ v·∫´n g·ªçi /chat ƒë·ªÉ AI reply b√¨nh th∆∞·ªùng
            try {
            const res = await fetch('http://localhost:3000/chat', {
                method: 'POST',
                headers: { 'Content-Type':'application/json' },
                body: JSON.stringify({ message: "kh√¥ng" })
            });
            const data = await res.json();
            const reply = data.reply || data.output;
            addMessage('ai', reply);
            } catch (e) {
            console.error(e);
            addMessage('ai', '‚ùå L·ªói khi g·ª≠i x√°c nh·∫≠n kh√¥ng h·ªó tr·ª£.', true);
            }
        }
    }



  

    // Check connection every 10 seconds (reduced from 30s for better UX)
    setInterval(checkConnection, 10000);
    checkConnection();

    function addMessage(sender, text, isError = false) {
        const messageElement = document.createElement('div');
        messageElement.classList.add('message', sender);
        if (isError) messageElement.classList.add('error-message');

        // ƒë·∫£m b·∫£o c√≥ string, n·∫øu kh√¥ng th√¨ d√πng empty string
        const content = text ?? '';

        // n·∫øu marked ƒëang load v√† content kh√¥ng r·ªóng th√¨ parse, ng∆∞·ª£c l·∫°i ch·ªâ set text
        if (typeof marked !== 'undefined' && content) {
            try {
                const processed = marked.parse(content, {
                    breaks: true,
                    gfm: true,
                    sanitize: false
                });
                const tempDiv = document.createElement('div');
                tempDiv.innerHTML = processed;

                // Process links for image display
                const links = tempDiv.querySelectorAll('a');
                links.forEach(link => {
                    const href = link.getAttribute('href');
                    const linkText = link.textContent.trim();

                    // Convert "Xem h√¨nh ·∫£nh" links to images
                    if (linkText === 'Xem h√¨nh ·∫£nh' && href && href.match(/\.(jpeg|jpg|gif|png|webp|svg)$/i)) {
                        const imgElement = document.createElement('img');
                        imgElement.src = href;
                        imgElement.alt = "H√¨nh ·∫£nh minh h·ªça";
                        imgElement.loading = "lazy";
                        
                        // Error handling for images
                        imgElement.onerror = function() {
                            this.style.display = 'none';
                            const errorText = document.createElement('span');
                            errorText.textContent = '‚ùå Kh√¥ng th·ªÉ t·∫£i h√¨nh ·∫£nh';
                            errorText.style.color = '#f44336';
                            this.parentNode.insertBefore(errorText, this);
                        };
                        
                        link.replaceWith(imgElement);
                    } else {
                        // Add security attributes to external links
                        if (href && href.startsWith('http')) {
                            link.setAttribute('target', '_blank');
                            link.setAttribute('rel', 'noopener noreferrer');
                        }
                    }
                });
           messageElement.innerHTML = tempDiv.innerHTML;
            } catch (error) {
                console.error('Error processing markdown:', error);
                messageElement.textContent = text; // Fallback to plain text
            }
        } else {
        messageElement.textContent = content;
        }

        chatMessages.appendChild(messageElement);
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }

    function toggleInputs(disabled) {
        userInput.disabled = disabled;
        sendButton.disabled = disabled || userInput.value.trim() === '';
        isProcessing = disabled;
    }

    async function sendMessage() {
        const question = userInput.value.trim();
        if (question === '' || isProcessing) return;

        // Check connection before sending
        if (!isConnected) {
            addMessage('ai', 'üîå Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi server tr∆∞·ªõc khi g·ª≠i tin nh·∫Øn.', true);
            return;
        }

        // Add user message
        addMessage('user', question);
        userInput.value = '';
        toggleInputs(true);

        // Add loading message
        addMessage('ai', '<span class="loading">ƒêang suy nghƒ©...</span>');

        try {
            // Use AbortController for timeout (supported in modern browsers)
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), 100000); // 1m timeout

            const response = await fetch('http://localhost:3000/chat', {
                method: 'POST',
                headers: { 
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                body: JSON.stringify({ message: question }),
                signal: controller.signal
            });

            clearTimeout(timeoutId);

            // Remove loading message
            const loadingElement = chatMessages.querySelector('.loading');
            if (loadingElement) {
                loadingElement.closest('.message').remove();
            }

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const data = await response.json();
            // console.log('Response data:', data);


            const reply =  data.output ;

            const toolCalls = data.toolCalls || {};
            // console.log('Tool calls:', toolCalls);
            const emo = toolCalls.emotion_support;
            if (emo && emo.needsSupport) {
                renderSupportPrompt(emo.message_vi);
                return;
            } 
             if (reply) {
                addMessage('ai', reply.output);
                // Update connection status on successful response
                isConnected = true;
                connectionStatus.textContent = 'Tr·ª±c tuy·∫øn';
                connectionStatus.className = 'connection-status online';
            } else if (data.error) {
                addMessage('ai', `‚ùå L·ªói: ${data.error}`, true);
            } else {
                addMessage('ai', '‚ùå Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ AI Assistant.', true);
            }

        } catch (error) {
            console.error('Error sending message:', error);
            
            // Remove loading message
            const loadingElement = chatMessages.querySelector('.loading');
            if (loadingElement) {
                loadingElement.closest('.message').remove();
            }

            let errorMessage = '‚ùå ƒê√£ x·∫£y ra l·ªói khi k·∫øt n·ªëi ƒë·∫øn AI Assistant.';
            
            if (error.name === 'AbortError') {
                errorMessage = '‚è±Ô∏è Y√™u c·∫ßu qu√° th·ªùi gian. Vui l√≤ng th·ª≠ l·∫°i.';
            } else if (error.message.includes('Failed to fetch') || error.message.includes('NetworkError')) {
                errorMessage = 'üîå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng ki·ªÉm tra:\n‚Ä¢ Server c√≥ ƒëang ch·∫°y kh√¥ng?\n‚Ä¢ ƒê·ªãa ch·ªâ http://localhost:3000 c√≥ ƒë√∫ng kh√¥ng?\n‚Ä¢ T∆∞·ªùng l·ª≠a c√≥ ch·∫∑n k·∫øt n·ªëi kh√¥ng?';
                isConnected = false;
                connectionStatus.textContent = 'Ngo·∫°i tuy·∫øn';
                connectionStatus.className = 'connection-status offline';
            } else if (error.message.includes('CORS')) {
                errorMessage = 'üö´ L·ªói CORS. Vui l√≤ng ki·ªÉm tra c·∫•u h√¨nh server.';
            }
            
            addMessage('ai', errorMessage, true);
        } finally {
            toggleInputs(false);
        }
    }

    // Event listeners
    sendButton.addEventListener('click', sendMessage);
    
    userInput.addEventListener('keypress', (event) => {
        if (event.key === 'Enter' && !event.shiftKey) {
            event.preventDefault();
            sendMessage();
        }
    });
    chatForm.addEventListener('submit', e => { e.preventDefault(); sendMessage(); });
    // Auto-resize input and update send button state
    userInput.addEventListener('input', () => {
        toggleInputs(false); // This will update button state based on input
    });

    // Initial state
    toggleInputs(false);
    userInput.focus();

    // Welcome message
    addMessage('ai', 'üëã **Ch√†o b·∫°n!** T√¥i l√† AI Assistant c·ªßa Nami Exchange. \n\nB·∫°n c√≥ th·ªÉ h·ªèi t√¥i v·ªÅ:\n‚Ä¢ Th√¥ng tin v·ªÅ v√≠ c·ªßa b·∫°n \n‚Ä¢ Th√¥ng tin Token\n‚Ä¢ Tin t·ª©c th·ªã tr∆∞·ªùng\n‚Ä¢ ƒê·∫∑t Th√¥ng b√°o gi√° \n‚Ä¢ H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng Nami exchange\n‚Ä¢ G·ª£i √Ω m·ªôt s·ªë b√†i vi·∫øt, kh√≥a h·ªçc t·ª´ binance Academy   \n\nH√£y ƒë·∫∑t c√¢u h·ªèi ƒë·ªÉ b·∫Øt ƒë·∫ßu! üöÄ');
});


