document.addEventListener('DOMContentLoaded', () => {
    const userInput = document.getElementById('user-input');
    const sendButton = document.getElementById('send-button');
    const chatMessages = document.getElementById('chat-messages');
    const connectionStatus = document.getElementById('connection-status');
    const chatForm = document.getElementById('chat-form');

    let isConnected = false;
    let isProcessing = false;

    function checkConnection() {
        fetch('http://localhost:3000/health')
            .then(response => {
                if (response.ok) {
                    isConnected = true;
                    connectionStatus.textContent = 'Tr·ª±c tuy·∫øn';
                    connectionStatus.className = 'connection-status online';
                } else {
                    throw new Error();
                }
            })
            .catch(() => {
                isConnected = false;
                connectionStatus.textContent = 'ƒêang ki·ªÉm tra k·∫øt n·ªëi...';
                connectionStatus.className = 'connection-status offline';
            });
        connectionStatus.style.display = 'block';
    }

    function renderSupportPrompt(actions = []) {
        const container = document.createElement('div');
        container.className = 'support-buttons';

        actions.forEach(action => {
            const btn = document.createElement('button');
            btn.className = 'support-btn' + (action.type?.includes('no') ? ' no' : '');
            btn.textContent = action.label_vi || action.label_en || action.type;
            btn.onclick = () => handleSupportAction(action.type);
            container.appendChild(btn);
        });

        chatMessages.appendChild(container);
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }

    function handleSupportAction(type) {
    // T√πy v√†o type action m√† b·∫°n x·ª≠ l√Ω
        if (type === 'connect_cs' || type === 'connect_cs_urgent') {
            // C√≥ th·ªÉ m·ªü trang CS ho·∫∑c th√¥ng b√°o l√™n chat
            addMessage('ai', 'üí° <strong>H∆∞·ªõng d·∫´n:</strong><br>‚Ä¢ Chuy·ªÉn sang tab v·ª´a m·ªü<br>‚Ä¢ T√¨m bi·ªÉu t∆∞·ª£ng chat/h·ªó tr·ª£<br>‚Ä¢ Click v√† nh·∫≠p "N·ªôi dung b·∫°n c·∫ßn h·ªó tr·ª£"', false, true);
            setTimeout(() => window.open("https://test.nami.exchange/vi/support", "_blank")?.focus(), 3000);
            addMessage('ai', 'C·∫£m ∆°n b·∫°n, m√¨nh ƒë√£ k·∫øt n·ªëi b·∫°n v·ªõi ƒë·ªôi h·ªó tr·ª£. B·∫°n h√£y ki·ªÉm tra tab m·ªõi nh√©.');
        } else if (type === 'pause_trading') {
            addMessage('ai', 'B·∫°n n√™n t·∫°m d·ª´ng giao d·ªãch v√† ngh·ªâ ng∆°i m·ªôt ch√∫t. N·∫øu c·∫ßn m√¨nh lu√¥n ·ªü ƒë√¢y h·ªó tr·ª£ b·∫°n.');
        } else if (type === 'get_tips') {
            addMessage('ai', 'M·ªôt s·ªë m·∫πo qu·∫£n l√Ω c·∫£m x√∫c khi trade: Lu√¥n ki·ªÉm so√°t kh·ªëi l∆∞·ª£ng, ngh·ªâ ng∆°i khi c·∫£m x√∫c kh√¥ng ·ªïn ƒë·ªãnh, ƒë·ª´ng ‚Äúall in‚Äù khi stress...');
        } else if (type === 'continue') {
            addMessage('ai', 'C·∫£m ∆°n b·∫°n! M√¨nh lu√¥n ·ªü ƒë√¢y n·∫øu b·∫°n c·∫ßn h·ªó tr·ª£ th√™m.');
        }
        // X√≥a n√∫t sau khi ch·ªçn action
        document.querySelectorAll(".support-buttons").forEach(el => el.remove());
    }
    function translateLevel(level) {
    switch(level) {
        case "crisis": return "Kh·ªßng ho·∫£ng";
        case "very_negative": return "R·∫•t ti√™u c·ª±c";
        case "negative": return "Ti√™u c·ª±c";
        case "positive": return "T√≠ch c·ª±c";
        case "very_positive": return "R·∫•t t√≠ch c·ª±c";
        default: return level;
    }
}




    function handleSupportAgree() {
        addMessage('ai', 'üí° <strong>H∆∞·ªõng d·∫´n:</strong><br>‚Ä¢ Chuy·ªÉn sang tab v·ª´a m·ªü<br>‚Ä¢ T√¨m bi·ªÉu t∆∞·ª£ng chat/h·ªó tr·ª£<br>‚Ä¢ Click v√† nh·∫≠p "N·ªôi dung b·∫°n c·∫ßn h·ªó tr·ª£"');
        document.querySelectorAll(".support-buttons").forEach(el => el.remove());
        addMessage('ai', 'C·∫£m ∆°n b·∫°n ƒë√£ ƒë·ªìng √Ω h·ªó tr·ª£. T√¥i s·∫Ω m·ªü trang h·ªó tr·ª£ trong 3s.');
        setTimeout(() => window.open("https://test.nami.exchange/vi/support", "_blank")?.focus(), 3000);
    }

    async function sendSupportConfirmation(confirm) {
        document.querySelectorAll('.support-buttons').forEach(el => el.remove());
        if (!confirm) {
            try {
                const res = await fetch('http://localhost:3000/chat', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ message: "kh√¥ng" })
                });
                const data = await res.json();
                addMessage('ai', data.reply || data.output);
            } catch {
                addMessage('ai', '‚ùå L·ªói khi g·ª≠i x√°c nh·∫≠n kh√¥ng h·ªó tr·ª£.', true);
            }
        }
    }

    function addMessage(sender, text, isError = false, isRawHTML = false) {
        const msg = document.createElement('div');
        msg.className = `message ${sender}${isError ? ' error-message' : ''}`;

        if (isRawHTML) {
            msg.innerHTML = text;
        } else if (typeof marked !== 'undefined' && text) {
            try {
                const parsed = marked.parse(text);
                const tempDiv = document.createElement('div');
                tempDiv.innerHTML = parsed;

                tempDiv.querySelectorAll('a').forEach(link => {
                    const href = link.getAttribute('href');
                    const linkText = link.textContent.trim();

                    if (linkText === 'Xem h√¨nh ·∫£nh' && href?.match(/\.(jpeg|jpg|gif|png|webp|svg)$/i)) {
                        const img = new Image();
                        img.src = href;
                        img.alt = 'H√¨nh ·∫£nh minh h·ªça';
                        img.loading = 'lazy';
                        img.onerror = () => {
                            img.style.display = 'none';
                            const errText = document.createElement('span');
                            errText.textContent = '‚ùå Kh√¥ng th·ªÉ t·∫£i h√¨nh ·∫£nh';
                            errText.style.color = '#f44336';
                            img.before(errText);
                        };
                        link.replaceWith(img);
                    } else if (href?.startsWith('http')) {
                        link.target = '_blank';
                        link.rel = 'noopener noreferrer';
                    }
                });
                msg.innerHTML = tempDiv.innerHTML;
            } catch {
                msg.textContent = text;
            }
        } else {
            msg.textContent = text ?? '';
        }

        chatMessages.appendChild(msg);
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }


    function toggleInputs(disabled) {
        userInput.disabled = disabled;
        sendButton.disabled = disabled || !userInput.value.trim();
        isProcessing = disabled;
    }

    async function sendMessage() {
        const question = userInput.value.trim();
        if (!question || isProcessing) return;

        if (!isConnected) {
            addMessage('ai', 'üîå Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi server tr∆∞·ªõc khi g·ª≠i tin nh·∫Øn.', true);
            return;
        }

        addMessage('user', question);
        userInput.value = '';
        toggleInputs(true);
        addMessage('ai', `
                    <div class="loading-wrapper" id="loading-dots">
                        Thinking
                        <span class="loading-dots">
                        <span>.</span><span>.</span><span>.</span>
                        </span>
                    </div>
                    `, false, true);

        try {
            const controller = new AbortController();
            const timeout = setTimeout(() => controller.abort(), 100000);
            const res = await fetch('http://localhost:3000/chat', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ message: question }),
                signal: controller.signal
            });
            clearTimeout(timeout);
            chatMessages.querySelector('.loading-dots')?.closest('.message')?.remove();

            if (!res.ok) throw new Error();

            const data = await res.json();
            const reply = data.output; // reply.output l√† c√¢u tr·∫£ l·ªùi ƒë√£ do agent LLM sinh ra, ƒë√£ ƒë√∫ng tone, ƒë√∫ng guideline
            const emo = data.toolCalls?.emotion_support;
            console.log("Emotion support data:", emo);
            // N·∫øu c√≥ c·∫£m x√∫c ƒë·∫∑c bi·ªát (crisis, negative...) th√¨ c√≥ th·ªÉ hi·ªán badge c·∫£m x√∫c (n√™n hi·ªÉn th·ªã tr√™n message ƒë·∫ßu)
            // Optional: hi·ªán label c·∫£m x√∫c (n·∫øu mu·ªën)
            // if (emo?.emotion?.level && emo.emotion.level !== "neutral") {
            //     addMessage('ai', `<span class="emotion-label">C·∫£m x√∫c: ${translateLevel(emo.emotion.level)}</span>`, false, true);
            // }

            // Lu√¥n hi·ªán c√¢u tr·∫£ l·ªùi c·ªßa agent (kh√¥ng l·∫•y message_vi n·ªØa)
            if (reply) {
                addMessage('ai', reply.output); // agent ƒë√£ t·ª± sinh ƒë·ªông vi√™n/h∆∞·ªõng d·∫´n ƒë√∫ng tone
                isConnected = true;
                connectionStatus.textContent = 'Tr·ª±c tuy·∫øn';
                connectionStatus.className = 'connection-status online';
            } else {
                addMessage('ai', '‚ùå Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ AI Assistant.', true);
            }

            // N·∫øu c√≥ action (support.actions), render n√∫t ƒë·ªông cho UI
            if (emo?.support?.actions && emo.support.actions.length > 0) {
                renderSupportPrompt(emo.support.actions);
            }


        } catch (error) {
            chatMessages.querySelector('.loading')?.closest('.message')?.remove();
            const msg = error.name === 'AbortError'
                ? '‚è±Ô∏è Y√™u c·∫ßu qu√° th·ªùi gian. Vui l√≤ng th·ª≠ l·∫°i.'
                : error.message.includes('CORS')
                    ? 'üö´ L·ªói CORS. Vui l√≤ng ki·ªÉm tra c·∫•u h√¨nh server.'
                    : '‚ùå ƒê√£ x·∫£y ra l·ªói khi k·∫øt n·ªëi ƒë·∫øn AI Assistant.';
            addMessage('ai', msg, true);
            isConnected = false;
            connectionStatus.textContent = 'Ngo·∫°i tuy·∫øn';
            connectionStatus.className = 'connection-status offline';
        } finally {
            toggleInputs(false);
        }
    }

    sendButton.addEventListener('click', sendMessage);
    userInput.addEventListener('keypress', e => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            sendMessage();
        }
    });
    chatForm.addEventListener('submit', e => {
        e.preventDefault();
        sendMessage();
    });
    userInput.addEventListener('input', () => toggleInputs(false));
    toggleInputs(false);
    userInput.focus();
    setInterval(checkConnection, 10000);
    checkConnection();
    addMessage('ai', 'üëã **Ch√†o b·∫°n!** T√¥i l√† nami sea Assistant c·ªßa Nami Exchange.\n\nB·∫°n c√≥ th·ªÉ h·ªèi t√¥i v·ªÅ:\n\n‚Ä¢ Th√¥ng tin v·ªÅ v√≠ c·ªßa b·∫°n \n\n‚Ä¢ Th√¥ng tin Token\n\n‚Ä¢ Tin t·ª©c th·ªã tr∆∞·ªùng\n\n‚Ä¢ ƒê·∫∑t Th√¥ng b√°o gi√° \n\n‚Ä¢ H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng Nami exchange\n\n‚Ä¢ G·ª£i √Ω m·ªôt s·ªë b√†i vi·∫øt, kh√≥a h·ªçc t·ª´ binance Academy   \n\nH√£y ƒë·∫∑t c√¢u h·ªèi ƒë·ªÉ b·∫Øt ƒë·∫ßu! üöÄ');
});