document.addEventListener('DOMContentLoaded', () => {
    const userInput = document.getElementById('user-input');
    const sendButton = document.getElementById('send-button');
    const chatMessages = document.getElementById('chat-messages');
    const connectionStatus = document.getElementById('connection-status');
    const chatForm = document.getElementById('chat-form');

    let isConnected = false;
    let isProcessing = false;

    function checkConnection() {
        fetch('https://nami-assistant.vercel.app/health')
            .then(response => {
                if (response.ok) {
                    isConnected = true;
                    connectionStatus.textContent = 'Tr·ª±c tuy·∫øn';
                    connectionStatus.className = 'connection-status online';
                } else {
                    throw new Error();
                }
            })
            .catch(() => {
                isConnected = false;
                connectionStatus.textContent = 'ƒêang ki·ªÉm tra k·∫øt n·ªëi...';
                connectionStatus.className = 'connection-status offline';
            });
        connectionStatus.style.display = 'block';
    }

    function renderSupportPrompt(text) {
        addMessage('ai', text);
        const container = document.createElement('div');
        container.className = 'support-buttons';
        container.innerHTML = `
            <button class="support-btn">ƒê·ªìng √Ω</button>
            <button class="support-btn no">Kh√¥ng</button>
        `;
        container.children[0].onclick = handleSupportAgree;
        container.children[1].onclick = () => sendSupportConfirmation(false);
        chatMessages.appendChild(container);
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }

    function handleSupportAgree() {
        addMessage('ai', 'üí° <strong>H∆∞·ªõng d·∫´n:</strong><br>‚Ä¢ Chuy·ªÉn sang tab v·ª´a m·ªü<br>‚Ä¢ T√¨m bi·ªÉu t∆∞·ª£ng chat/h·ªó tr·ª£<br>‚Ä¢ Click v√† nh·∫≠p "N·ªôi dung b·∫°n c·∫ßn h·ªó tr·ª£"');
        document.querySelectorAll(".support-buttons").forEach(el => el.remove());
        addMessage('ai', '‚úÖ C·∫£m ∆°n b·∫°n ƒë√£ ƒë·ªìng √Ω h·ªó tr·ª£. T√¥i s·∫Ω m·ªü trang h·ªó tr·ª£ trong 3s.');
        setTimeout(() => window.open("https://test.nami.exchange/vi/support", "_blank")?.focus(), 3000);
    }

    async function sendSupportConfirmation(confirm) {
        document.querySelectorAll('.support-buttons').forEach(el => el.remove());
        if (!confirm) {
            try {
                const res = await fetch('https://nami-assistant.vercel.app/chat', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ message: "kh√¥ng" })
                });
                const data = await res.json();
                addMessage('ai', data.reply || data.output);
            } catch {
                addMessage('ai', '‚ùå L·ªói khi g·ª≠i x√°c nh·∫≠n kh√¥ng h·ªó tr·ª£.', true);
            }
        }
    }

    function addMessage(sender, text, isError = false, isRawHTML = false) {
        const msg = document.createElement('div');
        msg.className = `message ${sender}${isError ? ' error-message' : ''}`;

        if (isRawHTML) {
            msg.innerHTML = text;
        } else if (typeof marked !== 'undefined' && text) {
            try {
                const parsed = marked.parse(text);
                const tempDiv = document.createElement('div');
                tempDiv.innerHTML = parsed;

                tempDiv.querySelectorAll('a').forEach(link => {
                    const href = link.getAttribute('href');
                    const linkText = link.textContent.trim();

                    if (linkText === 'Xem h√¨nh ·∫£nh' && href?.match(/\.(jpeg|jpg|gif|png|webp|svg)$/i)) {
                        const img = new Image();
                        img.src = href;
                        img.alt = 'H√¨nh ·∫£nh minh h·ªça';
                        img.loading = 'lazy';
                        img.onerror = () => {
                            img.style.display = 'none';
                            const errText = document.createElement('span');
                            errText.textContent = '‚ùå Kh√¥ng th·ªÉ t·∫£i h√¨nh ·∫£nh';
                            errText.style.color = '#f44336';
                            img.before(errText);
                        };
                        link.replaceWith(img);
                    } else if (href?.startsWith('http')) {
                        link.target = '_blank';
                        link.rel = 'noopener noreferrer';
                    }
                });
                msg.innerHTML = tempDiv.innerHTML;
            } catch {
                msg.textContent = text;
            }
        } else {
            msg.textContent = text ?? '';
        }

        chatMessages.appendChild(msg);
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }


    function toggleInputs(disabled) {
        userInput.disabled = disabled;
        sendButton.disabled = disabled || !userInput.value.trim();
        isProcessing = disabled;
    }

    async function sendMessage() {
        const question = userInput.value.trim();
        if (!question || isProcessing) return;

        if (!isConnected) {
            addMessage('ai', 'üîå Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi server tr∆∞·ªõc khi g·ª≠i tin nh·∫Øn.', true);
            return;
        }

        addMessage('user', question);
        userInput.value = '';
        toggleInputs(true);
        addMessage('ai', `
                    <div class="loading-wrapper" id="loading-dots">
                        Thinking
                        <span class="loading-dots">
                        <span>.</span><span>.</span><span>.</span>
                        </span>
                    </div>
                    `, false, true);

        try {
            const controller = new AbortController();
            const timeout = setTimeout(() => controller.abort(), 100000);
            const res = await fetch('https://nami-assistant.vercel.app/chat', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ message: question }),
                signal: controller.signal
            });
            clearTimeout(timeout);
            chatMessages.querySelector('.loading-dots')?.closest('.message')?.remove();

            if (!res.ok) throw new Error();

            const data = await res.json();
            const reply = data.output;
            const emo = data.toolCalls?.emotion_support;

            if (emo?.needsSupport) {
                renderSupportPrompt(emo.message_vi);
            } else if (reply) {
                addMessage('ai', reply.output);
                isConnected = true;
                connectionStatus.textContent = 'Tr·ª±c tuy·∫øn';
                connectionStatus.className = 'connection-status online';
            } else {
                addMessage('ai', '‚ùå Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ AI Assistant.', true);
            }

        } catch (error) {
            chatMessages.querySelector('.loading')?.closest('.message')?.remove();
            const msg = error.name === 'AbortError'
                ? '‚è±Ô∏è Y√™u c·∫ßu qu√° th·ªùi gian. Vui l√≤ng th·ª≠ l·∫°i.'
                : error.message.includes('CORS')
                    ? 'üö´ L·ªói CORS. Vui l√≤ng ki·ªÉm tra c·∫•u h√¨nh server.'
                    : '‚ùå ƒê√£ x·∫£y ra l·ªói khi k·∫øt n·ªëi ƒë·∫øn AI Assistant.';
            addMessage('ai', msg, true);
            isConnected = false;
            connectionStatus.textContent = 'Ngo·∫°i tuy·∫øn';
            connectionStatus.className = 'connection-status offline';
        } finally {
            toggleInputs(false);
        }
    }

    sendButton.addEventListener('click', sendMessage);
    userInput.addEventListener('keypress', e => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            sendMessage();
        }
    });
    chatForm.addEventListener('submit', e => {
        e.preventDefault();
        sendMessage();
    });
    userInput.addEventListener('input', () => toggleInputs(false));
    toggleInputs(false);
    userInput.focus();
    setInterval(checkConnection, 10000);
    checkConnection();
    addMessage('ai', 'üëã **Ch√†o b·∫°n!** T√¥i l√† AI Assistant c·ªßa Nami Exchange.\n\nB·∫°n c√≥ th·ªÉ h·ªèi t√¥i v·ªÅ:\n\n‚Ä¢ Th√¥ng tin v·ªÅ v√≠ c·ªßa b·∫°n \n\n‚Ä¢ Th√¥ng tin Token\n\n‚Ä¢ Tin t·ª©c th·ªã tr∆∞·ªùng\n\n‚Ä¢ ƒê·∫∑t Th√¥ng b√°o gi√° \n\n‚Ä¢ H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng Nami exchange\n\n‚Ä¢ G·ª£i √Ω m·ªôt s·ªë b√†i vi·∫øt, kh√≥a h·ªçc t·ª´ binance Academy   \n\nH√£y ƒë·∫∑t c√¢u h·ªèi ƒë·ªÉ b·∫Øt ƒë·∫ßu! üöÄ');
});